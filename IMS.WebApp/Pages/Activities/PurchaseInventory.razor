@page "/purchase"

@using static IMS.WebApp.Components.Common.AutoCompleteComponent;

@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@inject IPurchaseInventoryUseCase PurchaseInventoryUseCase

@inject IJSRuntime JSRuntime

<h3>Purchase Inventory</h3>
<br/>
<EditForm id="purchaseForm" Model="purchaseViewModel" OnValidSubmit="Purchase">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po">Purchase Order #</label>
        <InputText id="po" @bind-Value="purchaseViewModel.PONumber" class="form-control"></InputText>
    </div>
    <br/>

    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent 
                    Label="Inventory to Purchase"                                                              
                    SearchFunction="SearchInventory"        
                    OnItemSelected="OnItemSelected"
                ></AutoCompleteComponent>
                <input type="hidden" value="@purchaseViewModel.InventoryId" />
                @if (purchaseViewModel.InventoryId > 0 && purchaseViewModel.InventoryPrice >= 0)
                {
                    <text>Price:</text>
                    @purchaseViewModel.InventoryPrice.ToString("c");
                }
            </div>
        </div>
    </div>
    <br/>
    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="purchaseViewModel.QuantityToPurchase" class="form-control"></InputNumber>
    </div>

    <br/>
    <button type="submit" class="btn btn-primary">Purchase</button>
</EditForm>



@code {

    private PurchaseViewModel purchaseViewModel = new PurchaseViewModel();
    private Inventory? selectedInventory = null;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if(firstRender)
        {
            JSRuntime.InvokeVoidAsync("PreventFormSubmition", "purchaseForm");
        }
    }

    private async Task Purchase()
    {
        await PurchaseInventoryUseCase.ExecuteAsync(
            this.purchaseViewModel.PONumber,
            this.selectedInventory,
            this.purchaseViewModel.QuantityToPurchase,
            "Frank"
        );

        this.purchaseViewModel = new PurchaseViewModel();
        this.selectedInventory = null;
    }

    private async Task<List<ItemViewModel>?> SearchInventory(string name)
    {
        var list = await ViewInventoriesByNameUseCase.ExecuteAsync(name);
        if (list == null) return null;

        return list.Select(x => new ItemViewModel { Id = x.InventoryId, Name = x.InventoryName })?.ToList();
    }

    private async Task OnItemSelected(ItemViewModel item)
    {
        this.selectedInventory = await ViewInventoryByIdUseCase.ExecuteAsync(item.Id);
        purchaseViewModel.InventoryId = item.Id;
        purchaseViewModel.InventoryPrice = this.selectedInventory.Price;
    }
}
